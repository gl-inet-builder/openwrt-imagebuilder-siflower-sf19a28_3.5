#!/bin/sh

. /lib/functions/gl_util.sh

model=$(get_model)
[ $model = "ap1300" ] && model=b1300

led="/dev/null"
wan_eth="eth0"
lan_eth="eth1"

case "$model" in
	"ar150"|\
	"mifi"|\
	"ar300"|\
	"ar300m")
		led="/sys/class/leds/gl-${model}:green:lan/brightness"
		;;
	"mt300a"|\
	"mt300n"|\
	"mt300n-v2")
		led="/sys/class/leds/gl-${model}:blue:wan/brightness"
		wan_eth="eth0.2"
		lan_eth="eth0.1"	
		;;
	"usb150")
		led="/sys/class/leds/gl-${model}:green:power/brightness"
		wan_eth="eth1"
		;;
	"ar750")
	    led="/sys/class/leds/gl-$model:white:power/brightness"
	    lan_eth="eth1.1"
	    ;;
	"x750")
		led="/sys/class/leds/gl-$model:white:power/brightness"
		;;
	"ar750s")
		led="/sys/class/leds/gl-$model:white:power/brightness"
		wan_eth="eth0.2"
		lan_eth="eth0.1"	
		;;		
	"x1200")
		led="/sys/class/leds/gl-$model:red:system/brightness"
		wan_eth="eth0.2"
		lan_eth="eth0.1"	
		;;			
	"x300b")
		led="/sys/class/leds/gl-$model:green:wan/brightness"
		wan_eth="eth0"
		lan_eth="eth1"	
		;;			
	"b1300"|\
	"s1300")
		led="/sys/class/leds/power_led/brightness"
		;;
	"b2200")
		led="/sys/class/leds/power_white_led/brightness"
		;;
	"mv1000")
		led="/sys/class/leds/gl-mv1000:green:power/brightness"
		wan_eth="wan"
		lan_eth="lan0 lan1 usb0"
		;;
	"n300")
		/etc/init.d/led restart
		;;
	"sf1200")
		led="/sys/class/leds/gl-sf1200:blue:power/brightness"
		wan_eth="eth0.2"
		lan_eth="eth0.1"
		;;
	*)
esac

kill -9 $(pgrep -f "button_pressed") &> /dev/null

# Turn led off
if [ "$model" = "ar750" -o "$model" = "x750" -o "$model" = "x300b"  -o "$model" = "ar750s" -o "$model" = "b1300" -o "$model" = "b2200" -o "$model" = "s1300" -o "$model" = "x1200" -o "$model" = "mv1000" -o "$model" = "sf1200" ]; then
	echo 1 > $led
else
	echo 0 > $led
fi

reset_pressed_duration=$(cat /tmp/reset_pressed_duration)

factory_reset(){
	echo "FACTORY RESET" > /dev/console
	/usr/bin/flashleds &
	[ "$model" = "e750" ] && {
		echo {\"system\":\"reft\"} >/tmp/mcu_message
        	killall -17 e750-mcu
	}
	jffs2reset -y && reboot &
}

mv1000_reset_wireless(){
	local phy=''
	local i=0
	local mode=''

	while true
	do
		phy=`uci -q get wireless.@wifi-device[$i].phy` 
		mode=`uci -q get wireless.@wifi-iface[$i].mode`
		if [ "$phy" = "phy" ];then
			i=$((i+1))
			continue
		elif [ "$phy" = "" ];then
			break
		fi

		if [ "$mode" = "sta" ];then
			uci set wireless.@wifi-device[$i].disabled='1'
			i=$((i+1))
			continue
		fi
		
		uci set wireless.@wifi-device[$i].disabled='0'
		uci set wireless.@wifi-iface[$i].disabled='0'
		i=$((i+1))
	done

	local dev=`uci -q get wireless.guest2g.device`
	if [ "$dev" != "" ];then
		uci set wireless.guest2g.disabled='1'
	fi
}

reset_network(){
	if [ "$model" = "b1300" -o "$model" = "s1300" -o "$model" = "b2200" ];then
		[ "$(uci -q get repacd.repacd.Enable)" = 1 ] && exit 0
	fi

	echo "Now resetting network" > /dev/console
	
	if [ "$model" = "usb150" ];then
		uci delete network.wan
	elif [ "$model" = "vixmini" -o "$model" = "n300" ]; then
		uci set network.wan.ifname='eth0'
		uci set network.wan.proto='dhcp'
		uci delete network.wan.dns
		uci set network.lan.ifname=''
        elif [ "$model" = "e750" ]; then
		echo {\"system\":\"renw\"} >/tmp/mcu_message
        	killall -17 e750-mcu
                uci set network.lan.ifname='eth0'
                uci set network.wan.proto='dhcp'
                uci delete network.wan.dns
                uci set network.wan.ifname=''
	elif [ "$model" = "b2200" ]; then
		uci set network.wan.ifname="eth0"
		uci set network.wan.proto='dhcp'
		uci set network.lan.ifname="eth1"
		uci delete network.wan.dns
	else
		uci set network.wan.ifname="$wan_eth"
		uci set network.wan.proto='dhcp'
		uci set network.lan.ifname="$lan_eth"
		uci delete network.wan.dns
	fi

	case "$model" in
		"ar150"|\
		"mifi"|\
		"ar300m"|\
		"x300b"|\
		"mt300a"|\
		"mt300n"|\
		"n300"|\
		"usb150")
			uci set wireless.radio0.disabled='0'
			uci set wireless.@wifi-iface[0].disabled='0'
			uci set wireless.guest2g.disabled='1'
			;;
		"mv1000")
			mv1000_reset_wireless
			;;
		"mt300n-v2")
			uci set wireless.radio0.disabled='0'
			uci set wireless.@wifi-iface[0].disabled='0'
			uci set wireless.guest2g.disabled='1'
			
			uci set system.led_wifi_led.dev='ra0'
			/etc/init.d/led restart
			;;
		"ar750"|\
		"x750"|\
		"ar750s"|\
		"x1200"|\
		"b1300"|\
		"e750"|\
		"sf1200"|\
		"s1300")
			uci set wireless.radio0.disabled='0'
			uci set wireless.radio1.disabled='0'
			uci set wireless.@wifi-iface[0].disabled='0'
			uci set wireless.@wifi-iface[1].disabled='0'
			uci set wireless.guest2g.disabled='1'
			uci set wireless.guest5g.disabled='1'
			;;
		*)
	esac

	uci delete network.wwan.peerdns
	uci delete network.wan.peerdns
	uci delete network.lan.macaddr
	default_macaddr=$(uci get network.lan.default_macaddr)
	[ -n "$default_macaddr" ] && uci set network.lan.macaddr=$default_macaddr
	uci delete network.wwan.dns
	uci delete network.tethering.dns
	uci delete network.modem.dns
	uci set network.lan.proto='static'
	# uci set network.lan.ipaddr='192.168.8.1'
	uci delete network.stabridge
	uci set dhcp.lan.ignore='0'
	if [ "$model" != "mv1000" ];then
		uci set wireless.radio0.disabled='0'
		uci set wireless.wifi-iface[0].disabled='0'
		uci -q delete wireless.sta
		ifconfig apcli0 down 2>/dev/null    # mt series
		sed -i "s/org_htmode/htmode/g" /etc/config/wireless
	fi
	if [ "$model" = "mv1000" ];then
		local dev=`uci -q get wireless.sta.device`
		local num=`echo "$dev" | tr -d "a-zA-Z"`
		[ "$dev" != "" ] && {
			uci set wireless.$dev.disabled="1"
			local sta="sta${num}"
			uci rename wireless.sta="$sta"
		}
	fi
	uci -q delete glconfig.bridge
    if [ "$model" = "e750" ]; then
            uci set glconfig.general.wan2lan='1'
    else
            uci set glconfig.general.wan2lan='0'
    fi
	uci commit
	/etc/init.d/network restart

	cli_enabled=$(uci get glconfig.openvpn.enable)
	cli_mode=$(ifconfig|grep tap0)
	[ "$cli_enabled" = "1" ] && [ "$cli_mode" = "" ] &&{
		sleep 10
		/etc/init.d/startvpn restart
		echo "restart openvpn client" > /dev/console
	}

	srv_enabled=$(uci get vpn_service.global.enable)
	[ "$srv_enabled" = "1" ] && {
		sleep 10
		/etc/init.d/vpn-service restart
		echo "restart openvpn server" > /dev/console
	}
	
	/etc/init.d/dnsmasq enable
	/etc/init.d/dnsmasq restart
	if [ "$model" = "ar750s" -o "$model" = "x1200" ];then 
		swconfig dev switch0 set phy_reset
	elif [ "$model" = "vixmini" -o "$model" = "n300" ]; then
		swconfig dev switch0 set reset 1
		swconfig dev switch0 set enable_vlan 0
		swconfig dev switch0 set apply 1
	elif [ "$model" = "s1300" -o "$model" = "b1300" -o "$model" = "b2200" ];then
		ssdk_sh debug phy set 2 0 0x840; ssdk_sh debug phy set 3 0 0x840; ssdk_sh debug phy set 4 0 0x840
		ssdk_sh debug phy set 2 0 0x1240; ssdk_sh debug phy set 3 0 0x1240; ssdk_sh debug phy set 4 0 0x1240
	fi
}

if [ "$reset_pressed_duration" -gt 20 ]; then
	echo 'Reset action cancelled' > /dev/console
	/etc/init.d/led restart
elif [ "$reset_pressed_duration" -gt 8 ]; then
	factory_reset
elif [ "$reset_pressed_duration" -gt 3 ]; then
	reset_network
	/etc/init.d/gl_tertf start
	/etc/init.d/led restart
elif [ "$reset_pressed_duration" -le 3 ]; then
	/etc/init.d/led restart
fi
